name: Build Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration ${{ matrix.configuration }} --no-restore

      - name: Test with coverage
        run: |
          dotnet test --no-restore --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=./coverage.opencover.xml

      - name: Unit Tests + SonarScanner with pull request decoration support
        uses: highbyte/sonarscan-dotnet@v2.4.1
        with:
          # The key of the SonarQube project
          sonarProjectKey: CodingYourCareer_ConstantReminders-Api
          # The name of the SonarQube project
          sonarProjectName:  ConstantReminders-Api
          # The name of the SonarQube organization in SonarCloud. For hosted SonarQube, skip this setting.
          sonarOrganization: codingyourcareer
          # Optional command arguments to dotnet test
          dotnetTestArguments: --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          # Optional extra command arguments the the SonarScanner 'begin' command
          sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --severity-threshold=high --file=./ConstantReminders-Api/ConstantReminderApi.csproj

      # - name: Install Snyk
      #   run: |
      #     sudo npm install -g snyk

      # - name: Authenticate Snyk
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   run: snyk auth $SNYK_TOKEN

      # - name: Run Snyk Open Source (SCA) on all projects
      #   run: |
      #     for csproj in $(find . -name "*.csproj"); do
      #       echo "Testing $csproj"
      #       snyk test --file=$csproj --package-manager=nuget --project-name=$(basename $csproj .csproj) || true
      #     done

      # - name: Create Snyk Open Source (SCA) snapshot for all projects
      #   run: |
      #     for csproj in $(find . -name "*.csproj"); do
      #       echo "Monitoring $csproj"
      #       snyk monitor --file=$csproj --package-manager=nuget --project-name=$(basename $csproj .csproj) || true
      #     done
