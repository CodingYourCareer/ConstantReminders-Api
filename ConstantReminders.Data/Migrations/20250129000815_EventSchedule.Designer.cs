// <auto-generated />
using System;
using ConstantReminders.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConstantReminders.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250129000815_EventSchedule")]
    partial class EventSchedule
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConstantReminders.Contracts.Models.DaysOfWeekEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<Guid?>("NotificationScheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_schedule_id");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time");

                    b.HasKey("Id")
                        .HasName("pk_days_of_week_entity");

                    b.HasIndex("NotificationScheduleId")
                        .HasDatabaseName("ix_days_of_week_entity_notification_schedule_id");

                    b.ToTable("days_of_week_entity", (string)null);
                });

            modelBuilder.Entity("ConstantReminders.Contracts.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("NotificationScheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_schedule_id");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("NotificationScheduleId")
                        .HasDatabaseName("ix_events_notification_schedule_id");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("ConstantReminders.Contracts.Models.NotificationSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<int?>("DurationInDays")
                        .HasColumnType("integer")
                        .HasColumnName("duration_in_days");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<TimeSpan>("FrequencyWithinDay")
                        .HasColumnType("interval")
                        .HasColumnName("frequency_within_day");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("notification_type");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time");

                    b.HasKey("Id")
                        .HasName("pk_notification_schedule");

                    b.ToTable("notification_schedule", (string)null);
                });

            modelBuilder.Entity("ConstantReminders.Contracts.Models.DaysOfWeekEntity", b =>
                {
                    b.HasOne("ConstantReminders.Contracts.Models.NotificationSchedule", "NotificationSchedule")
                        .WithMany("DaysOfWeek")
                        .HasForeignKey("NotificationScheduleId")
                        .HasConstraintName("fk_days_of_week_entity_notification_schedule_notification_sche");

                    b.Navigation("NotificationSchedule");
                });

            modelBuilder.Entity("ConstantReminders.Contracts.Models.Event", b =>
                {
                    b.HasOne("ConstantReminders.Contracts.Models.NotificationSchedule", "NotificationSchedule")
                        .WithMany()
                        .HasForeignKey("NotificationScheduleId")
                        .HasConstraintName("fk_events_notification_schedule_notification_schedule_id");

                    b.Navigation("NotificationSchedule");
                });

            modelBuilder.Entity("ConstantReminders.Contracts.Models.NotificationSchedule", b =>
                {
                    b.Navigation("DaysOfWeek");
                });
#pragma warning restore 612, 618
        }
    }
}
